services:
  db:
    image: postgres:13-alpine
    env_file: .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  online-platform:
    build:
      context: ./online-platform
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "80:5000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
      

  offline-system:
    build: 
      context: ./offline-system
      dockerfile: ./Dockerfile
    image: offline-system
    container_name: offline-system-1
    privileged: true
    devices:
      - "/dev:/dev"
      - "/dev/i2c-1:/dev/i2c-1"
      - "/dev/spidev0.0:/dev/spidev0.0"
      - "/dev/spidev0.1:/dev/spidev0.1"
      - "/dev/gpiomem:/dev/gpiomem"
      - "/dev/video0:/dev/video0"
      - "/dev/vchiq:/dev/vchiq"
    env_file: .env
    volumes:
      - /run/udev:/run/udev:ro
      - ./images:/app/images  
      - /tmp/.X11-unix:/tmp/.X11-unix
    environment:
      - DISPLAY=${DISPLAY}
      - LIBCAMERA_LOG_LEVEL=3
    stdin_open: true
    tty: true
    depends_on:
      - online-platform
    network_mode: "host"
    restart: unless-stopped


volumes:
  pgdata:
